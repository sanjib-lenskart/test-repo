<div id="fits">
<div class="container-fluid comparemain-lk">
<button id="start-camera" class="btn findyourfithome hideimp">Check Frame Size</button> 
  
<div class="container-fit">
  <form enctype="multipart/form-data">
    <div class="app">
      <video id="camera-stream" playsinline></video>
      <img id="snap">

      <p id="error-message"></p>

      <div class="controls">
        <p class="instruction">For accurate result, make sure your face is well-lit & within the mask</p>
        <a href="#" id="take-photo" title="Take Photo">Take Photo</a>
      </div>

      <div class="instructionimages hide">
        <div class="skip hideimp">SKIP</div>
         <div class="back">BACK</div>
        <h3>How it works</h3>
        <div id="instructionimages-slider" class="owl-carousel">
          <div class="instructionimages_img_cont">
            <img class="image1" src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/Screen-1.png?84958" />
            <h4>Take your glasses off</h4>
            <p>This will help us track your eyes and calculate your frame size</p>
          </div>

          <div class="instructionimages_img_cont">
            <img class="image2" src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/Screen-2.png?84958" />
            <h4>Align your face to the guide</h4>
            <p>This ensures that the distance between your face and phone is appropriate</p>
          </div>

          <div class="instructionimages_img_cont">
            <img class="image3" src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/Screen-3.png?84958" />
            <h4>Keep the camera at eye level</h4>
            <p>For accurate result, we need to make sure that youe face and the phone are aligned vertically</p>
          </div>

          <div class="instructionimages_img_cont">
            <img class="image4" src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/Screen-4.png?84958" />
            <h4>Browse frames that fit you perfectly</h4>
            <p>Select from a list of 1000+ frames tailor made for you</p>
          </div>
        </div>
        <div id="start-camera1" class="lets visible">LET'S GET STARTED</div>
      </div>

      <div class="sizeresponce">
        <span class="closesize" onclick="goBack();">&times;</span>
        <div class="contop">
<!--           <p class="imageicon">
            <img src="https://cdn.shopify.com/s/files/1/0084/6957/7794/files/we_are_here.97b4c07fd402e584f700_100x.png?11316" alt="">
          </p> -->         
         
          <p>Your Frame size is</p>          
          <p class="sizeint"><span></span>mm (<span class="topsize"></span>)</p>
          
           <p class="imageicon">
            <img src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/ezgif.com-webp-to-png_2.png?v=1587553099" alt="">
          </p>
          
        </div>

         <div class="conbott">
          <img src="https://static.lenskart.com/media/desktop/img/15-July-19/ic_frame_size_eyeglasses.png" />
          <p class="goforsize">Go For <a href="" class="sizevar"></a></p>
          <p class="eyeframes">Eyeframe</p>
        </div>
        
        <div class="shapebox">
          <h4>Recommended Frame Shape</h4>
          
          <div class="shapeboxitems">
            <div class="shapeboxitem">
            <img src="https://static.lenskart.com/media/desktop/img/15-July-19/ic_frame_size_eyeglasses.png" />
            <p>type</p>
            </div>
             <div class="shapeboxitem">
            <img src="https://static.lenskart.com/media/desktop/img/15-July-19/ic_frame_size_eyeglasses.png" />
            <p>type</p>
            </div>
             <div class="shapeboxitem">
            <img src="https://static.lenskart.com/media/desktop/img/15-July-19/ic_frame_size_eyeglasses.png" />
            <p>type</p>
            </div>
          </div>
        </div>
      </div>

      <div class="sizeresponce_err">
        <span class="closesize_err">&times;</span>
        <h3 class="title_err"></h3>
        <p class="message_err"></p>
        <div id="start-camera_ta" class="btn full_width findyourfit_tryagn">TRY AGAIN</div>
      </div>

      <div class="loaderbox">
        <p><img src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/small_loader.gif?84083" alt=""/> <span>Calculating Frame Size</span></p>
      </div>

      <!-- Hidden canvas element. Used for taking snapshot of video. -->
      <canvas id="canvas"></canvas>
<span class="overlay_cross" onclick="goBack();">&times;</span>
      <!--       <div class="faceoverlay"></div> -->
<!--       <img class="faceoverlay" src="https://cdn.shopify.com/s/files/1/0135/4144/1595/files/boundary_overlay_400x.png?86258" alt=""/> -->
      <img class="faceoverlay" src="https://cdn.shopify.com/s/files/1/0047/5335/8922/files/record-overlay.svg?v=1590756232" alt=""/>
    </div>
  </form>
  <div class="bgoverlayfit"></div>
</div>
</div>
</div>
<script>
  // References to all the element we will need.
  var videos = document.querySelector('#camera-stream'),
      image = document.querySelector('#snap'),
      start_camera = document.querySelector('#start-camera'),
      start_camera_ta = document.querySelector('#start-camera_ta'),
      controls = document.querySelector('.controls'),
      take_photo_btn = document.querySelector('#take-photo'),
      //delete_photo_btn = document.querySelector('#delete-photo'),
      //download_photo_btn = document.querySelector('#download-photo'),
      error_message = document.querySelector('#error-message');
  closesize = document.querySelector('.closesize');
  closesize_err = document.querySelector('.closesize_err');
  skip = document.querySelector('.skip');
  back = document.querySelector('.back');

  // Mobile browsers cannot play video without user input,
  // so here we're using a button to start it manually.
  start_camera.addEventListener("click", function(e){
    //e.preventDefault();
    oncamera();
    // Start video playback manually.
    
    videos.play();
    showVideo();   
    
  });

  
  start_camera_ta.addEventListener("click", function(e){
    //e.preventDefault();
    oncamera();
    // Start video playback manually.
    
    videos.play();
    showVideo();   
    
    $('.instructionimages').hide();
    $('.sizeresponce_err').hide();
    $('.bgoverlayfit').hide();   
    $('.faceoverlay').show();
    $('.overlay_cross').show();
  });

  skip.addEventListener("click", function(e){
    //e.preventDefault();
    oncamera();
    // Start video playback manually.
    $('.faceoverlay').show();
    $('.overlay_cross').show();
    videos.play();
    showVideo();

    $('.instructionimages').hide();
  });

  back.addEventListener("click", function(e){
    $(".container-fit").hide();
  });

  
  take_photo_btn.addEventListener("click", function(e){
    $('.faceoverlay').hide();
    $('.overlay_cross').hide();
    $('.bgoverlayfit').show();
    $('.loaderbox').show();
$('.findyourfit-new').css('display','block');
    e.preventDefault();
    var snap = takeSnapshot();

    // Show image. 
    image.setAttribute('src', snap);
    //image.classList.add("visible");

    var canvas = document.getElementById('canvas');
    var dataURL = canvas.toDataURL("image/jpeg");
    videos.pause();

    var mysenturls = 'https://area51.lenskart.io/api/v1/frame-size/calculate?faceAnalysis=true';
    var form = new FormData();
    form.append("image_file", dataURItoBlob(dataURL));

    $.ajax({
      "async": true,
      "crossDomain": true,
      type: "POST",
      "headers": {
        "cache-control": "no-cache",
        "X-Api-Client": "international",
        "authToken": "7mpy4tjjg5b117shcn54wa80uqo30o3u9p3m1p01uf6iaeysgzz6n5qet6t0f2bj"
      },           
      "processData": false,
      "contentType": false,
      "mimeType": "multipart/form-data",
      url: mysenturls,
      crossDomain: true,
      "data": form,
      success: function (data) {
        successoperation(data);
      },
      error: function (data){         
        erroroperation(data); 
        console.log("error:"+data);
      }
    });     
  });

  function erroroperation(response){  
    // obj = JSON.parse(response);
    var abc = JSON.parse(JSON.stringify(response));
    var obj = JSON.parse(abc.responseText);
    

    function printValues(obj) {
      for(var k in obj) {
        if(obj[k] instanceof Object) {
          printValues(obj[k]);
        } else {
          //document.write([k] +": " + obj[k] +"<br>");              
          if([k] == 'title'){            
            console.log(obj[k]);
            $('.sizeresponce_err .title_err').text(obj[k]);              
          }

          if([k] == 'message'){            
            console.log(obj[k]);
            $('.sizeresponce_err .message_err').text(obj[k]);              
          }
          $('.loaderbox').hide();
          $('.sizeresponce_err').show();
        };
      }
    };

    // Printing all the values from the resulting object
    printValues(obj);
  }

  function successoperation(response){

    myObj = JSON.parse(response);
    //console.log(myObj);
    for (x in myObj) {
      console.log(parseInt(myObj[x].frameWidth));
      console.log(myObj[x].faceShape);
      console.log(myObj[x]['faceShape'].shape);
      //console.log(myObj[x]);

      {% if template == 'index' %}
      {% assign collectionhandle = 'eyeglasses' %}
      {% else if template == 'collection' %}
      {% assign collectionhandle = collection.handle %}
      {% else if template == 'product' %}
      {% assign collectionhandle = collection.handle %}
      {% endif %}
      $('.sizeresponce .sizeint span').text(parseInt(myObj[x].frameWidth));

      //find medium small large category
      var inputval = parseInt(myObj[x].frameWidth);
      if(inputval == null || inputval == '') {     
      }
      else if(inputval < 48){
        $('.sizeresponce .sizevar').text('Small');
        $('.contop .topsize').text('Small');
        $('.sizeresponce .sizevar').attr('href','/collections/{{ collectionhandle }}/size_small');
      var sizetype = "size_small";
      }

      else if(inputval >= 48 && inputval <= 55){
        $('.sizeresponce .sizevar').text('Medium');
          $('.contop .topsize').text('Medium');
          $('.sizeresponce .sizevar').attr('href','/collections/{{ collectionhandle }}/size_medium');
          var sizetype = "size_medium";
      }

      else if(inputval > 55){
        $('.sizeresponce .sizevar').text('Large');
            $('.contop .topsize').text('Large');
            $('.sizeresponce .sizevar').attr('href','/collections/{{ collectionhandle }}/size_large');
            var sizetype = "size_large";
      }

      else if(isNaN(inputval)){
        //$(".error1").show();
      }

    }

  var facetype = myObj[x]['faceShape'].shape;
          if(facetype == null || facetype == '') {     
      }
          else if(facetype == "round"){
            var result = '<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_wayfarer+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'wayfarer.png' | asset_img_url: '100x' }}" /><p>Wayfarer</p></div></a>'; 
            result = result +'<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_rectangle+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'rectangle.png' | asset_img_url: '100x' }}" /><p>Rectangle</p></div></a>'; 
            $('.shapeboxitems').html(result);
          }
          
          else if(facetype == "diamond"){
            var result = '<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_wayfarer+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'wayfarer.png' | asset_img_url: '100x' }}" /><p>Rectangle</p></div></a>'; 
            result = result +'<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_round+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'round.png' | asset_img_url: '100x' }}" /><p>Round</p></div></a>'; 
            $('.shapeboxitems').html(result);
          }
          
          else if(facetype == "square"){
            var result = '<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_oval+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'oval.png' | asset_img_url: '100x' }}" /><p>Oval</p></div></a>'; 
            result = result +'<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_round+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'round.png' | asset_img_url: '100x' }}" /><p>Round</p></div></a>'; 
            $('.shapeboxitems').html(result);
          }
          
          else if(facetype == "oval"){
            var result = '<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_rectangle+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'rectangle.png' | asset_img_url: '100x' }}" /><p>Rectangle</p></div></a>'; 
            result = result +'<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_round+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'round.png' | asset_img_url: '100x' }}" /><p>Round</p></div></a>'; 
            $('.shapeboxitems').html(result);
            
          }
          else if(facetype == "heart"){
            var result = '<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_wayfarer+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'wayfarer.png' | asset_img_url: '100x' }}" /><p>Wayfarer</p></div></a>'; 
            result = result +'<a class="shapeboxitem" href="/collections/{{ collectionhandle }}/shape_rectangle+'+ sizetype +'"><div class="shapeboxitemc"><img src="{{ 'rectangle.png' | asset_img_url: '100x' }}" /><p>Rectangle</p></div></a>'; 
            $('.shapeboxitems').html(result);
            
          }
          else if(isNaN(facetype)){
        $('.shapebox').hide();
      }
          
    $('.loaderbox').hide();
    $('.sizeresponce').show();
  }
  function dataURItoBlob(dataURI) {
    var byteString = atob(dataURI.split(',')[1]);
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
      ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], {type: 'image/jpeg'});
  }


  closesize.addEventListener("click", function(e){
    hideelements();
    stopcamera();
  });

  closesize_err.addEventListener("click", function(e){
    hideelements();
    stopcamera();
  });

  function oncamera(){
    
    
    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // Not adding `{ audio: true }` since we only want video now
    navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {
          videos.srcObject = stream;

          // Play the video element to start the stream.
          videos.play();
          videos.onplay = function() {
            showVideo();
          };
    });
}  
  }

  function showVideo(){
    // Display the video stream and the controls.
    hideUI();
    videos.classList.add("visible");    
     setTimeout(function(){
     controls.classList.add("visible");
    $('.faceoverlay').show();
    $('.overlay_cross').show();
    $('.instructionimages').hide();
    $('.findyourfit-new').css('display','none');
    $('#take-photo').css('display','block');
    }, 2000);
  }

  function takeSnapshot(){
    // Here we're using a trick that involves a hidden canvas element.
    var hidden_canvas = document.querySelector('canvas'),
        context = hidden_canvas.getContext('2d');

    var width = videos.videoWidth,
        height = videos.videoHeight;

    if (width && height) {

      // Setup a canvas with the same dimensions as the video.
      hidden_canvas.width = width;
      hidden_canvas.height = height;

      // Make a copy of the current frame in the video on the canvas.
      context.drawImage(videos, 0, 0, width, height);

      // Turn the canvas image into a dataURL that can be used as a src for our photo.
      return hidden_canvas.toDataURL('image/png');
    }
  }

  function displayErrorMessage(error_msg, error){
    error = error || "";
    if(error){
      console.log(error);
    }

    error_message.innerText = error_msg;
    hideUI();
    error_message.classList.add("visible");
  }

  function hideUI(){
    // Helper function for clearing the app UI.
    controls.classList.remove("visible");
    start_camera.classList.remove("visible");
    videos.classList.remove("visible");
    snap.classList.remove("visible");
    error_message.classList.remove("visible");
  }

  function hideelements(){
    // Helper function for clearing the app UI.
    controls.classList.remove("visible");   
    videos.classList.remove("visible");
    snap.classList.remove("visible");
    error_message.classList.remove("visible");
  }
        
                      function goBack() {
  //window.history.back();
                        location.reload();
                        
}
          function closeall() {
  location.reload();
}
        function stopcamera(){       
          const stream = videos.srcObject;
          const tracks = stream.getTracks();
          tracks.forEach(function(track) {
            track.stop();
          });

          videos.srcObject = null;
        }
</script>